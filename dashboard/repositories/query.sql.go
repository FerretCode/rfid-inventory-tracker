// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repositories

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
    Id,
    Name,
    Sku,
    Category
) VALUES (
    NULL, ?, ?, ?
) RETURNING id, name, sku, category
`

type CreateItemParams struct {
	Name     sql.NullString `json:"name"`
	Sku      sql.NullString `json:"sku"`
	Category sql.NullString `json:"category"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem, arg.Name, arg.Sku, arg.Category)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sku,
		&i.Category,
	)
	return i, err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (
    Id,
    ViewTelemetry,
    ViewItems,
    ManageItems,
    PrepareTags,
    ManageUsers
) VALUES (
    NULL, ?, ?, ?, ?, ?
) RETURNING id, viewtelemetry, viewitems, manageitems, preparetags, manageusers, lastupdated
`

type CreatePermissionParams struct {
	Viewtelemetry sql.NullBool `json:"viewtelemetry"`
	Viewitems     sql.NullBool `json:"viewitems"`
	Manageitems   sql.NullBool `json:"manageitems"`
	Preparetags   sql.NullBool `json:"preparetags"`
	Manageusers   sql.NullBool `json:"manageusers"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission,
		arg.Viewtelemetry,
		arg.Viewitems,
		arg.Manageitems,
		arg.Preparetags,
		arg.Manageusers,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Viewtelemetry,
		&i.Viewitems,
		&i.Manageitems,
		&i.Preparetags,
		&i.Manageusers,
		&i.Lastupdated,
	)
	return i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
    Id,
    Uid,
    Item,
    Quantity,
    TagType
) VALUES (
    NULL, ?, ?, ?, ?
) RETURNING id, uid, item, quantity, tagtype
`

type CreateTagParams struct {
	Uid      sql.NullString `json:"uid"`
	Item     sql.NullInt64  `json:"item"`
	Quantity sql.NullInt64  `json:"quantity"`
	Tagtype  sql.NullString `json:"tagtype"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag,
		arg.Uid,
		arg.Item,
		arg.Quantity,
		arg.Tagtype,
	)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Item,
		&i.Quantity,
		&i.Tagtype,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    Id,
    Tag,
    Item,
    QuantityChanged,
    NewQuantity,
    TransactionDirection,
    Source,
    "Timestamp"
) VALUES (
    NULL, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, tag, item, quantitychanged, newquantity, transactiondirection, source, Timestamp
`

type CreateTransactionParams struct {
	Tag                  sql.NullInt64  `json:"tag"`
	Item                 sql.NullInt64  `json:"item"`
	Quantitychanged      sql.NullInt64  `json:"quantitychanged"`
	Newquantity          sql.NullInt64  `json:"newquantity"`
	Transactiondirection sql.NullString `json:"transactiondirection"`
	Source               sql.NullString `json:"source"`
	Timestamp            sql.NullTime   `json:"Timestamp"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.Tag,
		arg.Item,
		arg.Quantitychanged,
		arg.Newquantity,
		arg.Transactiondirection,
		arg.Source,
		arg.Timestamp,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.Item,
		&i.Quantitychanged,
		&i.Newquantity,
		&i.Transactiondirection,
		&i.Source,
		&i.Timestamp,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    Id,
    Username,
    PasswordDigest,
    Permissions
) VALUES (
    NULL, ?, ?, ?
) RETURNING id, username, passworddigest, permissions
`

type CreateUserParams struct {
	Username       sql.NullString `json:"username"`
	Passworddigest sql.NullString `json:"passworddigest"`
	Permissions    sql.NullInt64  `json:"permissions"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Passworddigest, arg.Permissions)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Passworddigest,
		&i.Permissions,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE Id = ?
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions
WHERE Id = ?
`

func (q *Queries) DeletePermission(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePermission, id)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE Id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE Id = ?
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE Id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, name, sku, category FROM items
WHERE Id = ? LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sku,
		&i.Category,
	)
	return i, err
}

const getPermission = `-- name: GetPermission :one
SELECT id, viewtelemetry, viewitems, manageitems, preparetags, manageusers, lastupdated FROM permissions
WHERE Id = ? LIMIT 1
`

func (q *Queries) GetPermission(ctx context.Context, id int64) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermission, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Viewtelemetry,
		&i.Viewitems,
		&i.Manageitems,
		&i.Preparetags,
		&i.Manageusers,
		&i.Lastupdated,
	)
	return i, err
}

const getPermissions = `-- name: GetPermissions :many
SELECT id, viewtelemetry, viewitems, manageitems, preparetags, manageusers, lastupdated FROM permissions
ORDER BY Id
`

func (q *Queries) GetPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Viewtelemetry,
			&i.Viewitems,
			&i.Manageitems,
			&i.Preparetags,
			&i.Manageusers,
			&i.Lastupdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTag = `-- name: GetTag :one
SELECT id, uid, item, quantity, tagtype FROM tags
WHERE Id = ? LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Item,
		&i.Quantity,
		&i.Tagtype,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, tag, item, quantitychanged, newquantity, transactiondirection, source, Timestamp FROM transactions
WHERE Id = ? LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.Item,
		&i.Quantitychanged,
		&i.Newquantity,
		&i.Transactiondirection,
		&i.Source,
		&i.Timestamp,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, passworddigest, permissions FROM users
WHERE Id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Passworddigest,
		&i.Permissions,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, passworddigest, permissions FROM users
WHERE Username = ? LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Passworddigest,
		&i.Permissions,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT id, name, sku, category FROM items
ORDER BY Id
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Sku,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, uid, item, quantity, tagtype FROM tags
ORDER BY Id
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Item,
			&i.Quantity,
			&i.Tagtype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, tag, item, quantitychanged, newquantity, transactiondirection, source, Timestamp FROM transactions
ORDER BY Id
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Tag,
			&i.Item,
			&i.Quantitychanged,
			&i.Newquantity,
			&i.Transactiondirection,
			&i.Source,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, passworddigest, permissions FROM users
ORDER BY Id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Passworddigest,
			&i.Permissions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :exec
UPDATE items
set Name = ?,
    Sku = ?,
    Category = ?
WHERE Id = ?
`

type UpdateItemParams struct {
	Name     sql.NullString `json:"name"`
	Sku      sql.NullString `json:"sku"`
	Category sql.NullString `json:"category"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.ExecContext(ctx, updateItem,
		arg.Name,
		arg.Sku,
		arg.Category,
		arg.ID,
	)
	return err
}

const updatePermission = `-- name: UpdatePermission :exec
UPDATE permissions
set ViewTelemetry = ?,
    ViewItems = ?,
    ManageItems = ?,
    PrepareTags = ?,
    ManageUsers = ?,
    LastUpdated = ?
WHERE Id = ?
`

type UpdatePermissionParams struct {
	Viewtelemetry sql.NullBool `json:"viewtelemetry"`
	Viewitems     sql.NullBool `json:"viewitems"`
	Manageitems   sql.NullBool `json:"manageitems"`
	Preparetags   sql.NullBool `json:"preparetags"`
	Manageusers   sql.NullBool `json:"manageusers"`
	Lastupdated   sql.NullTime `json:"lastupdated"`
	ID            int64        `json:"id"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) error {
	_, err := q.db.ExecContext(ctx, updatePermission,
		arg.Viewtelemetry,
		arg.Viewitems,
		arg.Manageitems,
		arg.Preparetags,
		arg.Manageusers,
		arg.Lastupdated,
		arg.ID,
	)
	return err
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags
set Uid = ?,
    Item = ?,
    Quantity = ?,
    TagType = ?
WHERE Id = ?
`

type UpdateTagParams struct {
	Uid      sql.NullString `json:"uid"`
	Item     sql.NullInt64  `json:"item"`
	Quantity sql.NullInt64  `json:"quantity"`
	Tagtype  sql.NullString `json:"tagtype"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.ExecContext(ctx, updateTag,
		arg.Uid,
		arg.Item,
		arg.Quantity,
		arg.Tagtype,
		arg.ID,
	)
	return err
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE transactions
set Tag = ?,
    Item = ?,
    QuantityChanged = ?,
    NewQuantity = ?,
    TransactionDirection = ?,
    Source = ?,
    "Timestamp" = ?
WHERE Id = ?
`

type UpdateTransactionParams struct {
	Tag                  sql.NullInt64  `json:"tag"`
	Item                 sql.NullInt64  `json:"item"`
	Quantitychanged      sql.NullInt64  `json:"quantitychanged"`
	Newquantity          sql.NullInt64  `json:"newquantity"`
	Transactiondirection sql.NullString `json:"transactiondirection"`
	Source               sql.NullString `json:"source"`
	Timestamp            sql.NullTime   `json:"Timestamp"`
	ID                   int64          `json:"id"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, updateTransaction,
		arg.Tag,
		arg.Item,
		arg.Quantitychanged,
		arg.Newquantity,
		arg.Transactiondirection,
		arg.Source,
		arg.Timestamp,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set Username = ?,
    PasswordDigest = ?,
    Permissions = ?
WHERE Id = ?
`

type UpdateUserParams struct {
	Username       sql.NullString `json:"username"`
	Passworddigest sql.NullString `json:"passworddigest"`
	Permissions    sql.NullInt64  `json:"permissions"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Passworddigest,
		arg.Permissions,
		arg.ID,
	)
	return err
}
